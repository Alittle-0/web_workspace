{"ast":null,"code":"// API service for Fake Store API\nconst BASE_URL = \"https://fakestoreapi.com\";\n\n// Fetch all products\nexport const fetchProducts = async () => {\n  try {\n    const response = await fetch(`${BASE_URL}/products`);\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch products\");\n    }\n    const data = await response.json();\n\n    // Map Fake Store API data to our expected format\n    return data.map(product => ({\n      id: product.id,\n      name: product.title,\n      price: Math.round(product.price),\n      // Round to nearest dollar\n      category: product.category,\n      description: product.description,\n      image: product.image,\n      rating: product.rating\n    }));\n  } catch (error) {\n    console.error(\"Error fetching products:\", error);\n    throw error;\n  }\n};\n\n// Fetch single product by ID\nexport const fetchProductById = async id => {\n  try {\n    const response = await fetch(`${BASE_URL}/products/${id}`);\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch product\");\n    }\n    const product = await response.json();\n\n    // Map to our expected format\n    return {\n      id: product.id,\n      name: product.title,\n      price: Math.round(product.price),\n      category: product.category,\n      description: product.description,\n      image: product.image,\n      rating: product.rating\n    };\n  } catch (error) {\n    console.error(\"Error fetching product:\", error);\n    throw error;\n  }\n};\n\n// Fetch all categories\nexport const fetchCategories = async () => {\n  try {\n    const response = await fetch(`${BASE_URL}/products/categories`);\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch categories\");\n    }\n    const categories = await response.json();\n\n    // Capitalize first letter of each category and add \"All\" option\n    const formattedCategories = categories.map(cat => cat.charAt(0).toUpperCase() + cat.slice(1));\n    return [\"All\", ...formattedCategories];\n  } catch (error) {\n    console.error(\"Error fetching categories:\", error);\n    throw error;\n  }\n};\n\n// Fetch products by category\nexport const fetchProductsByCategory = async category => {\n  try {\n    const url = category.toLowerCase() === \"all\" ? `${BASE_URL}/products` : `${BASE_URL}/products/category/${category.toLowerCase()}`;\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch products by category\");\n    }\n    const data = await response.json();\n\n    // Map to our expected format\n    return data.map(product => ({\n      id: product.id,\n      name: product.title,\n      price: Math.round(product.price),\n      category: product.category,\n      description: product.description,\n      image: product.image,\n      rating: product.rating\n    }));\n  } catch (error) {\n    console.error(\"Error fetching products by category:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["BASE_URL","fetchProducts","response","fetch","ok","Error","data","json","map","product","id","name","title","price","Math","round","category","description","image","rating","error","console","fetchProductById","fetchCategories","categories","formattedCategories","cat","charAt","toUpperCase","slice","fetchProductsByCategory","url","toLowerCase"],"sources":["D:/product-listing/src/services/api.js"],"sourcesContent":["// API service for Fake Store API\r\nconst BASE_URL = \"https://fakestoreapi.com\";\r\n\r\n// Fetch all products\r\nexport const fetchProducts = async () => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/products`);\r\n    if (!response.ok) {\r\n      throw new Error(\"Failed to fetch products\");\r\n    }\r\n    const data = await response.json();\r\n\r\n    // Map Fake Store API data to our expected format\r\n    return data.map((product) => ({\r\n      id: product.id,\r\n      name: product.title,\r\n      price: Math.round(product.price), // Round to nearest dollar\r\n      category: product.category,\r\n      description: product.description,\r\n      image: product.image,\r\n      rating: product.rating,\r\n    }));\r\n  } catch (error) {\r\n    console.error(\"Error fetching products:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Fetch single product by ID\r\nexport const fetchProductById = async (id) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/products/${id}`);\r\n    if (!response.ok) {\r\n      throw new Error(\"Failed to fetch product\");\r\n    }\r\n    const product = await response.json();\r\n\r\n    // Map to our expected format\r\n    return {\r\n      id: product.id,\r\n      name: product.title,\r\n      price: Math.round(product.price),\r\n      category: product.category,\r\n      description: product.description,\r\n      image: product.image,\r\n      rating: product.rating,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error fetching product:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Fetch all categories\r\nexport const fetchCategories = async () => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/products/categories`);\r\n    if (!response.ok) {\r\n      throw new Error(\"Failed to fetch categories\");\r\n    }\r\n    const categories = await response.json();\r\n\r\n    // Capitalize first letter of each category and add \"All\" option\r\n    const formattedCategories = categories.map(\r\n      (cat) => cat.charAt(0).toUpperCase() + cat.slice(1)\r\n    );\r\n\r\n    return [\"All\", ...formattedCategories];\r\n  } catch (error) {\r\n    console.error(\"Error fetching categories:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Fetch products by category\r\nexport const fetchProductsByCategory = async (category) => {\r\n  try {\r\n    const url =\r\n      category.toLowerCase() === \"all\"\r\n        ? `${BASE_URL}/products`\r\n        : `${BASE_URL}/products/category/${category.toLowerCase()}`;\r\n\r\n    const response = await fetch(url);\r\n    if (!response.ok) {\r\n      throw new Error(\"Failed to fetch products by category\");\r\n    }\r\n    const data = await response.json();\r\n\r\n    // Map to our expected format\r\n    return data.map((product) => ({\r\n      id: product.id,\r\n      name: product.title,\r\n      price: Math.round(product.price),\r\n      category: product.category,\r\n      description: product.description,\r\n      image: product.image,\r\n      rating: product.rating,\r\n    }));\r\n  } catch (error) {\r\n    console.error(\"Error fetching products by category:\", error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}